mdp

module TestMDP

pc : [0..751] init 0;
x : [0..10600] init 0;
n : [0..106] init 0;

[] (pc=0) -> (pc'=750) & (x'=0);
[] (pc=750) -> (pc'=749) & (n'=106);
[] (pc=749) -> (pc'=748) & (x'=(x+95));
[] (pc=748) -> (pc'=747) & (x'=(x+76));
[] (pc=747) -> (pc'=746) & (x'=(x+44));
[] (pc=746) -> (pc'=745) & (x'=(x+65));
[] (pc=745) -> (pc'=744) & (x'=(x+16));
[] (pc=744) -> (pc'=743) & (x'=(x+44));
[] (pc=743) -> (pc'=742) & (x'=(x+50));
[] (pc=742) -> (pc'=741) & (x'=(x+18));
[] (pc=741) -> (pc'=740) & (x'=(x+93));
[] (pc=740) -> (pc'=739) & (x'=(x+54));
[] (pc=739) -> (pc'=738) & (x'=(x+75));
[] (pc=738) -> (pc'=737) & (x'=(x+91));
[] (pc=737) -> (pc'=736) & (x'=(x+71));
[] (pc=736) -> (pc'=735) & (x'=(x+65));
[] (pc=735) -> (pc'=734) & (x'=(x+19));
[] (pc=734) -> (pc'=733) & (x'=(x+12));
[] (pc=733) -> (pc'=732) & (x'=(x+40));
[] (pc=732) -> (pc'=731) & (x'=(x+15));
[] (pc=731) -> (pc'=730) & (x'=(x+36));
[] (pc=730) -> (pc'=729) & (x'=(x+36));
[] (pc=729) -> (pc'=728) & (x'=(x+40));
[] (pc=728) -> (pc'=727) & (x'=(x+27));
[] (pc=727) -> (pc'=726) & (x'=(x+51));
[] (pc=726) -> (pc'=725) & (x'=(x+83));
[] (pc=725) -> (pc'=724) & (x'=(x+8));
[] (pc=724) -> (pc'=723) & (x'=(x+16));
[] (pc=723) -> (pc'=722) & (x'=(x+15));
[] (pc=722) -> (pc'=721) & (x'=(x+61));
[] (pc=721) -> (pc'=720) & (x'=(x+82));
[] (pc=720) -> (pc'=719) & (x'=(x+45));
[] (pc=719) -> (pc'=718) & (x'=(x+80));
[] (pc=718) -> (pc'=717) & (x'=(x+96));
[] (pc=717) -> (pc'=716) & (x'=(x+29));
[] (pc=716) -> (pc'=715) & (x'=(x+45));
[] (pc=715) -> (pc'=714) & (x'=(x+14));
[] (pc=714) -> (pc'=713) & (x'=(x+16));
[] (pc=713) -> (pc'=712) & (x'=(x+74));
[] (pc=712) -> (pc'=711) & (x'=(x+40));
[] (pc=711) -> (pc'=710) & (x'=(x+84));
[] (pc=710) -> (pc'=709) & (x'=(x+71));
[] (pc=709) -> (pc'=708) & (x'=(x+48));
[] (pc=708) -> (pc'=707) & (x'=(x+50));
[] (pc=707) -> (pc'=706) & (x'=(x+64));
[] (pc=706) -> (pc'=705) & (x'=(x+32));
[] (pc=705) -> (pc'=704) & (x'=(x+23));
[] (pc=704) -> (pc'=703) & (x'=(x+34));
[] (pc=703) -> (pc'=702) & (x'=(x+42));
[] (pc=702) -> (pc'=701) & (x'=(x+59));
[] (pc=701) -> (pc'=700) & (x'=(x+45));
[] (pc=700) -> (pc'=699) & (x'=(x+9));
[] (pc=699) -> (pc'=698) & (x'=(x+25));
[] (pc=698) -> (pc'=697) & (x'=(x+79));
[] (pc=697) -> (pc'=696) & (x'=(x+67));
[] (pc=696) -> (pc'=695) & (x'=(x+5));
[] (pc=695) -> (pc'=694) & (x'=(x+92));
[] (pc=694) -> (pc'=693) & (x'=(x+81));
[] (pc=693) -> (pc'=692) & (x'=(x+49));
[] (pc=692) -> (pc'=691) & (x'=(x+22));
[] (pc=691) -> (pc'=690) & (x'=(x+41));
[] (pc=690) -> (pc'=689) & (x'=(x+77));
[] (pc=689) -> (pc'=688) & (x'=(x+28));
[] (pc=688) -> (pc'=687) & (x'=(x+15));
[] (pc=687) -> (pc'=686) & (x'=(x+63));
[] (pc=686) -> (pc'=685) & (x'=(x+33));
[] (pc=685) -> (pc'=684) & (x'=(x+6));
[] (pc=684) -> (pc'=683) & (x'=(x+56));
[] (pc=683) -> (pc'=682) & (x'=(x+8));
[] (pc=682) -> (pc'=681) & (x'=(x+97));
[] (pc=681) -> (pc'=680) & (x'=(x+86));
[] (pc=680) -> (pc'=679) & (x'=(x+52));
[] (pc=679) -> (pc'=678) & (x'=(x+54));
[] (pc=678) -> (pc'=677) & (x'=(x+74));
[] (pc=677) -> (pc'=676) & (x'=(x+52));
[] (pc=676) -> (pc'=675) & (x'=(x+31));
[] (pc=675) -> (pc'=674) & (x'=(x+100));
[] (pc=674) -> (pc'=673) & (x'=(x+86));
[] (pc=673) -> (pc'=672) & (x'=(x+85));
[] (pc=672) -> (pc'=671) & (x'=(x+77));
[] (pc=671) -> (pc'=670) & (x'=(x+100));
[] (pc=670) -> (pc'=669) & (x'=(x+66));
[] (pc=669) -> (pc'=668) & (x'=(x+80));
[] (pc=668) -> (pc'=667) & (x'=(x+26));
[] (pc=667) -> (pc'=666) & (x'=(x+17));
[] (pc=666) -> (pc'=665) & (x'=(x+52));
[] (pc=665) -> (pc'=664) & (x'=(x+66));
[] (pc=664) -> (pc'=663) & (x'=(x+17));
[] (pc=663) -> (pc'=662) & (x'=(x+44));
[] (pc=662) -> (pc'=661) & (x'=(x+70));
[] (pc=661) -> (pc'=660) & (x'=(x+2));
[] (pc=660) -> (pc'=659) & (x'=(x+16));
[] (pc=659) -> (pc'=658) & (x'=(x+45));
[] (pc=658) -> (pc'=657) & (x'=(x+66));
[] (pc=657) -> (pc'=656) & (x'=(x+87));
[] (pc=656) -> (pc'=655) & (x'=(x+65));
[] (pc=655) -> (pc'=654) & (x'=(x+98));
[] (pc=654) -> (pc'=653) & (x'=(x+75));
[] (pc=653) -> (pc'=652) & (x'=(x+41));
[] (pc=652) -> (pc'=651) & (x'=(x+39));
[] (pc=651) -> (pc'=650) & (x'=(x+91));
[] (pc=650) -> (pc'=649) & (x'=(x+69));
[] (pc=649) -> (pc'=648) & (x'=(x+23));
[] (pc=648) -> (pc'=647) & (x'=(x+54));
[] (pc=647) -> (pc'=646) & (x'=(x+54));
[] (pc=646) -> (pc'=645) & (x'=(x+43));
[] (pc=645) -> (pc'=644) & (x'=(x+24));
[] (pc=644) -> (pc'=1) & (x'=(x+59));
[] (pc=1) -> (pc'=751);
[] (pc=751) -> (pc'=751);

endmodule

rewards "post"

pc=1 : (x/n);

endrewards

