mdp

module TestMDP

pc : [0..970] init 0;
x : [0..10800] init 0;
n : [0..108] init 0;

[] (pc=0) -> (pc'=969) & (x'=0);
[] (pc=969) -> (pc'=968) & (n'=108);
[] (pc=968) -> (pc'=967) & (x'=(x+3));
[] (pc=967) -> (pc'=966) & (x'=(x+77));
[] (pc=966) -> (pc'=965) & (x'=(x+85));
[] (pc=965) -> (pc'=964) & (x'=(x+91));
[] (pc=964) -> (pc'=963) & (x'=(x+92));
[] (pc=963) -> (pc'=962) & (x'=(x+49));
[] (pc=962) -> (pc'=961) & (x'=(x+88));
[] (pc=961) -> (pc'=960) & (x'=(x+31));
[] (pc=960) -> (pc'=959) & (x'=(x+16));
[] (pc=959) -> (pc'=958) & (x'=(x+39));
[] (pc=958) -> (pc'=957) & (x'=(x+63));
[] (pc=957) -> (pc'=956) & (x'=(x+10));
[] (pc=956) -> (pc'=955) & (x'=(x+11));
[] (pc=955) -> (pc'=954) & (x'=(x+23));
[] (pc=954) -> (pc'=953) & (x'=(x+53));
[] (pc=953) -> (pc'=952) & (x'=(x+74));
[] (pc=952) -> (pc'=951) & (x'=(x+26));
[] (pc=951) -> (pc'=950) & (x'=(x+45));
[] (pc=950) -> (pc'=949) & (x'=(x+17));
[] (pc=949) -> (pc'=948) & (x'=(x+84));
[] (pc=948) -> (pc'=947) & (x'=(x+69));
[] (pc=947) -> (pc'=946) & (x'=(x+19));
[] (pc=946) -> (pc'=945) & (x'=(x+66));
[] (pc=945) -> (pc'=944) & (x'=(x+48));
[] (pc=944) -> (pc'=943) & (x'=(x+26));
[] (pc=943) -> (pc'=942) & (x'=(x+38));
[] (pc=942) -> (pc'=941) & (x'=(x+5));
[] (pc=941) -> (pc'=940) & (x'=(x+21));
[] (pc=940) -> (pc'=939) & (x'=(x+30));
[] (pc=939) -> (pc'=938) & (x'=(x+17));
[] (pc=938) -> (pc'=937) & (x'=(x+74));
[] (pc=937) -> (pc'=936) & (x'=(x+42));
[] (pc=936) -> (pc'=935) & (x'=(x+21));
[] (pc=935) -> (pc'=934) & (x'=(x+16));
[] (pc=934) -> (pc'=933) & (x'=(x+29));
[] (pc=933) -> (pc'=932) & (x'=(x+26));
[] (pc=932) -> (pc'=931) & (x'=(x+94));
[] (pc=931) -> (pc'=930) & (x'=(x+90));
[] (pc=930) -> (pc'=929) & (x'=(x+46));
[] (pc=929) -> (pc'=928) & (x'=(x+5));
[] (pc=928) -> (pc'=927) & (x'=(x+8));
[] (pc=927) -> (pc'=926) & (x'=(x+68));
[] (pc=926) -> (pc'=925) & (x'=(x+72));
[] (pc=925) -> (pc'=924) & (x'=(x+21));
[] (pc=924) -> (pc'=923) & (x'=(x+91));
[] (pc=923) -> (pc'=922) & (x'=(x+5));
[] (pc=922) -> (pc'=921) & (x'=(x+50));
[] (pc=921) -> (pc'=920) & (x'=(x+7));
[] (pc=920) -> (pc'=919) & (x'=(x+73));
[] (pc=919) -> (pc'=918) & (x'=(x+36));
[] (pc=918) -> (pc'=917) & (x'=(x+40));
[] (pc=917) -> (pc'=916) & (x'=(x+38));
[] (pc=916) -> (pc'=915) & (x'=(x+97));
[] (pc=915) -> (pc'=914) & (x'=(x+39));
[] (pc=914) -> (pc'=913) & (x'=(x+60));
[] (pc=913) -> (pc'=912) & (x'=(x+53));
[] (pc=912) -> (pc'=911) & (x'=(x+45));
[] (pc=911) -> (pc'=910) & (x'=(x+63));
[] (pc=910) -> (pc'=909) & (x'=(x+1));
[] (pc=909) -> (pc'=908) & (x'=(x+43));
[] (pc=908) -> (pc'=907) & (x'=(x+63));
[] (pc=907) -> (pc'=906) & (x'=(x+81));
[] (pc=906) -> (pc'=905) & (x'=(x+43));
[] (pc=905) -> (pc'=904) & (x'=(x+33));
[] (pc=904) -> (pc'=903) & (x'=(x+90));
[] (pc=903) -> (pc'=902) & (x'=(x+37));
[] (pc=902) -> (pc'=901) & (x'=(x+23));
[] (pc=901) -> (pc'=900) & (x'=(x+62));
[] (pc=900) -> (pc'=899) & (x'=(x+100));
[] (pc=899) -> (pc'=898) & (x'=(x+84));
[] (pc=898) -> (pc'=897) & (x'=(x+14));
[] (pc=897) -> (pc'=896) & (x'=(x+91));
[] (pc=896) -> (pc'=895) & (x'=(x+95));
[] (pc=895) -> (pc'=894) & (x'=(x+32));
[] (pc=894) -> (pc'=893) & (x'=(x+66));
[] (pc=893) -> (pc'=892) & (x'=(x+3));
[] (pc=892) -> (pc'=891) & (x'=(x+11));
[] (pc=891) -> (pc'=890) & (x'=(x+38));
[] (pc=890) -> (pc'=889) & (x'=(x+94));
[] (pc=889) -> (pc'=888) & (x'=(x+99));
[] (pc=888) -> (pc'=887) & (x'=(x+27));
[] (pc=887) -> (pc'=886) & (x'=(x+30));
[] (pc=886) -> (pc'=885) & (x'=(x+22));
[] (pc=885) -> (pc'=884) & (x'=(x+31));
[] (pc=884) -> (pc'=883) & (x'=(x+92));
[] (pc=883) -> (pc'=882) & (x'=(x+43));
[] (pc=882) -> (pc'=881) & (x'=(x+22));
[] (pc=881) -> (pc'=880) & (x'=(x+73));
[] (pc=880) -> (pc'=879) & (x'=(x+99));
[] (pc=879) -> (pc'=878) & (x'=(x+96));
[] (pc=878) -> (pc'=877) & (x'=(x+37));
[] (pc=877) -> (pc'=876) & (x'=(x+68));
[] (pc=876) -> (pc'=875) & (x'=(x+48));
[] (pc=875) -> (pc'=874) & (x'=(x+13));
[] (pc=874) -> (pc'=873) & (x'=(x+25));
[] (pc=873) -> (pc'=872) & (x'=(x+95));
[] (pc=872) -> (pc'=871) & (x'=(x+14));
[] (pc=871) -> (pc'=870) & (x'=(x+49));
[] (pc=870) -> (pc'=869) & (x'=(x+77));
[] (pc=869) -> (pc'=868) & (x'=(x+11));
[] (pc=868) -> (pc'=867) & (x'=(x+64));
[] (pc=867) -> (pc'=866) & (x'=(x+36));
[] (pc=866) -> (pc'=865) & (x'=(x+13));
[] (pc=865) -> (pc'=864) & (x'=(x+23));
[] (pc=864) -> (pc'=863) & (x'=(x+99));
[] (pc=863) -> (pc'=862) & (x'=(x+34));
[] (pc=862) -> (pc'=861) & (x'=(x+16));
[] (pc=861) -> (pc'=1) & (x'=(x+66));
[] (pc=1) -> (pc'=970);
[] (pc=970) -> (pc'=970);

endmodule

rewards "post"

pc=1 : (x/n);

endrewards

