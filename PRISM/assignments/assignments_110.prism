mdp

module TestMDP

pc : [0..1206] init 0;
x : [0..11000] init 0;
n : [0..110] init 0;

[] (pc=0) -> (pc'=1205) & (x'=0);
[] (pc=1205) -> (pc'=1204) & (n'=110);
[] (pc=1204) -> (pc'=1203) & (x'=(x+93));
[] (pc=1203) -> (pc'=1202) & (x'=(x+5));
[] (pc=1202) -> (pc'=1201) & (x'=(x+61));
[] (pc=1201) -> (pc'=1200) & (x'=(x+62));
[] (pc=1200) -> (pc'=1199) & (x'=(x+70));
[] (pc=1199) -> (pc'=1198) & (x'=(x+48));
[] (pc=1198) -> (pc'=1197) & (x'=(x+43));
[] (pc=1197) -> (pc'=1196) & (x'=(x+39));
[] (pc=1196) -> (pc'=1195) & (x'=(x+35));
[] (pc=1195) -> (pc'=1194) & (x'=(x+32));
[] (pc=1194) -> (pc'=1193) & (x'=(x+12));
[] (pc=1193) -> (pc'=1192) & (x'=(x+66));
[] (pc=1192) -> (pc'=1191) & (x'=(x+44));
[] (pc=1191) -> (pc'=1190) & (x'=(x+28));
[] (pc=1190) -> (pc'=1189) & (x'=(x+76));
[] (pc=1189) -> (pc'=1188) & (x'=(x+50));
[] (pc=1188) -> (pc'=1187) & (x'=(x+73));
[] (pc=1187) -> (pc'=1186) & (x'=(x+92));
[] (pc=1186) -> (pc'=1185) & (x'=(x+88));
[] (pc=1185) -> (pc'=1184) & (x'=(x+66));
[] (pc=1184) -> (pc'=1183) & (x'=(x+88));
[] (pc=1183) -> (pc'=1182) & (x'=(x+70));
[] (pc=1182) -> (pc'=1181) & (x'=(x+94));
[] (pc=1181) -> (pc'=1180) & (x'=(x+7));
[] (pc=1180) -> (pc'=1179) & (x'=(x+70));
[] (pc=1179) -> (pc'=1178) & (x'=(x+78));
[] (pc=1178) -> (pc'=1177) & (x'=(x+60));
[] (pc=1177) -> (pc'=1176) & (x'=(x+83));
[] (pc=1176) -> (pc'=1175) & (x'=(x+33));
[] (pc=1175) -> (pc'=1174) & (x'=(x+84));
[] (pc=1174) -> (pc'=1173) & (x'=(x+44));
[] (pc=1173) -> (pc'=1172) & (x'=(x+92));
[] (pc=1172) -> (pc'=1171) & (x'=(x+19));
[] (pc=1171) -> (pc'=1170) & (x'=(x+22));
[] (pc=1170) -> (pc'=1169) & (x'=(x+100));
[] (pc=1169) -> (pc'=1168) & (x'=(x+84));
[] (pc=1168) -> (pc'=1167) & (x'=(x+38));
[] (pc=1167) -> (pc'=1166) & (x'=(x+18));
[] (pc=1166) -> (pc'=1165) & (x'=(x+30));
[] (pc=1165) -> (pc'=1164) & (x'=(x+85));
[] (pc=1164) -> (pc'=1163) & (x'=(x+53));
[] (pc=1163) -> (pc'=1162) & (x'=(x+8));
[] (pc=1162) -> (pc'=1161) & (x'=(x+69));
[] (pc=1161) -> (pc'=1160) & (x'=(x+53));
[] (pc=1160) -> (pc'=1159) & (x'=(x+72));
[] (pc=1159) -> (pc'=1158) & (x'=(x+83));
[] (pc=1158) -> (pc'=1157) & (x'=(x+2));
[] (pc=1157) -> (pc'=1156) & (x'=(x+98));
[] (pc=1156) -> (pc'=1155) & (x'=(x+94));
[] (pc=1155) -> (pc'=1154) & (x'=(x+97));
[] (pc=1154) -> (pc'=1153) & (x'=(x+52));
[] (pc=1153) -> (pc'=1152) & (x'=(x+65));
[] (pc=1152) -> (pc'=1151) & (x'=(x+100));
[] (pc=1151) -> (pc'=1150) & (x'=(x+24));
[] (pc=1150) -> (pc'=1149) & (x'=(x+94));
[] (pc=1149) -> (pc'=1148) & (x'=(x+8));
[] (pc=1148) -> (pc'=1147) & (x'=(x+16));
[] (pc=1147) -> (pc'=1146) & (x'=(x+10));
[] (pc=1146) -> (pc'=1145) & (x'=(x+13));
[] (pc=1145) -> (pc'=1144) & (x'=(x+31));
[] (pc=1144) -> (pc'=1143) & (x'=(x+1));
[] (pc=1143) -> (pc'=1142) & (x'=(x+69));
[] (pc=1142) -> (pc'=1141) & (x'=(x+67));
[] (pc=1141) -> (pc'=1140) & (x'=(x+86));
[] (pc=1140) -> (pc'=1139) & (x'=(x+31));
[] (pc=1139) -> (pc'=1138) & (x'=(x+15));
[] (pc=1138) -> (pc'=1137) & (x'=(x+15));
[] (pc=1137) -> (pc'=1136) & (x'=(x+56));
[] (pc=1136) -> (pc'=1135) & (x'=(x+94));
[] (pc=1135) -> (pc'=1134) & (x'=(x+94));
[] (pc=1134) -> (pc'=1133) & (x'=(x+58));
[] (pc=1133) -> (pc'=1132) & (x'=(x+45));
[] (pc=1132) -> (pc'=1131) & (x'=(x+100));
[] (pc=1131) -> (pc'=1130) & (x'=(x+81));
[] (pc=1130) -> (pc'=1129) & (x'=(x+21));
[] (pc=1129) -> (pc'=1128) & (x'=(x+38));
[] (pc=1128) -> (pc'=1127) & (x'=(x+69));
[] (pc=1127) -> (pc'=1126) & (x'=(x+74));
[] (pc=1126) -> (pc'=1125) & (x'=(x+4));
[] (pc=1125) -> (pc'=1124) & (x'=(x+76));
[] (pc=1124) -> (pc'=1123) & (x'=(x+43));
[] (pc=1123) -> (pc'=1122) & (x'=(x+17));
[] (pc=1122) -> (pc'=1121) & (x'=(x+67));
[] (pc=1121) -> (pc'=1120) & (x'=(x+82));
[] (pc=1120) -> (pc'=1119) & (x'=(x+97));
[] (pc=1119) -> (pc'=1118) & (x'=(x+67));
[] (pc=1118) -> (pc'=1117) & (x'=(x+56));
[] (pc=1117) -> (pc'=1116) & (x'=(x+49));
[] (pc=1116) -> (pc'=1115) & (x'=(x+53));
[] (pc=1115) -> (pc'=1114) & (x'=(x+15));
[] (pc=1114) -> (pc'=1113) & (x'=(x+43));
[] (pc=1113) -> (pc'=1112) & (x'=(x+99));
[] (pc=1112) -> (pc'=1111) & (x'=(x+8));
[] (pc=1111) -> (pc'=1110) & (x'=(x+36));
[] (pc=1110) -> (pc'=1109) & (x'=(x+95));
[] (pc=1109) -> (pc'=1108) & (x'=(x+30));
[] (pc=1108) -> (pc'=1107) & (x'=(x+10));
[] (pc=1107) -> (pc'=1106) & (x'=(x+23));
[] (pc=1106) -> (pc'=1105) & (x'=(x+29));
[] (pc=1105) -> (pc'=1104) & (x'=(x+70));
[] (pc=1104) -> (pc'=1103) & (x'=(x+76));
[] (pc=1103) -> (pc'=1102) & (x'=(x+57));
[] (pc=1102) -> (pc'=1101) & (x'=(x+90));
[] (pc=1101) -> (pc'=1100) & (x'=(x+34));
[] (pc=1100) -> (pc'=1099) & (x'=(x+79));
[] (pc=1099) -> (pc'=1098) & (x'=(x+8));
[] (pc=1098) -> (pc'=1097) & (x'=(x+25));
[] (pc=1097) -> (pc'=1096) & (x'=(x+83));
[] (pc=1096) -> (pc'=1095) & (x'=(x+92));
[] (pc=1095) -> (pc'=1) & (x'=(x+98));
[] (pc=1) -> (pc'=1206);
[] (pc=1206) -> (pc'=1206);

endmodule

rewards "post"

pc=1 : (x/n);

endrewards

