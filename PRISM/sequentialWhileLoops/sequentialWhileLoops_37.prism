mdp

module TestMDP

pc : [0..77] init 0;
y : [0..407] init 0;
x : [0..1] init 0;

[] (pc=0) -> (pc'=39) & (y'=370);
[] (pc=39) -> (pc'=38) & (x'=1);
[] (pc=38) & (((x<370)&(y>370))) -> (pc'=40);
[] (pc=40) -> (pc'=38) & (y'=(y-x));
[] (pc=38) & (!(((x<370)&(y>370)))) -> (pc'=37);
[] (pc=37) & (((x<360)&(y>360))) -> (pc'=41);
[] (pc=41) -> (pc'=37) & (y'=(y-x));
[] (pc=37) & (!(((x<360)&(y>360)))) -> (pc'=36);
[] (pc=36) & (((x<350)&(y>350))) -> (pc'=42);
[] (pc=42) -> (pc'=36) & (y'=(y-x));
[] (pc=36) & (!(((x<350)&(y>350)))) -> (pc'=35);
[] (pc=35) & (((x<340)&(y>340))) -> (pc'=43);
[] (pc=43) -> (pc'=35) & (y'=(y-x));
[] (pc=35) & (!(((x<340)&(y>340)))) -> (pc'=34);
[] (pc=34) & (((x<330)&(y>330))) -> (pc'=44);
[] (pc=44) -> (pc'=34) & (y'=(y-x));
[] (pc=34) & (!(((x<330)&(y>330)))) -> (pc'=33);
[] (pc=33) & (((x<320)&(y>320))) -> (pc'=45);
[] (pc=45) -> (pc'=33) & (y'=(y-x));
[] (pc=33) & (!(((x<320)&(y>320)))) -> (pc'=32);
[] (pc=32) & (((x<310)&(y>310))) -> (pc'=46);
[] (pc=46) -> (pc'=32) & (y'=(y-x));
[] (pc=32) & (!(((x<310)&(y>310)))) -> (pc'=31);
[] (pc=31) & (((x<300)&(y>300))) -> (pc'=47);
[] (pc=47) -> (pc'=31) & (y'=(y-x));
[] (pc=31) & (!(((x<300)&(y>300)))) -> (pc'=30);
[] (pc=30) & (((x<290)&(y>290))) -> (pc'=48);
[] (pc=48) -> (pc'=30) & (y'=(y-x));
[] (pc=30) & (!(((x<290)&(y>290)))) -> (pc'=29);
[] (pc=29) & (((x<280)&(y>280))) -> (pc'=49);
[] (pc=49) -> (pc'=29) & (y'=(y-x));
[] (pc=29) & (!(((x<280)&(y>280)))) -> (pc'=28);
[] (pc=28) & (((x<270)&(y>270))) -> (pc'=50);
[] (pc=50) -> (pc'=28) & (y'=(y-x));
[] (pc=28) & (!(((x<270)&(y>270)))) -> (pc'=27);
[] (pc=27) & (((x<260)&(y>260))) -> (pc'=51);
[] (pc=51) -> (pc'=27) & (y'=(y-x));
[] (pc=27) & (!(((x<260)&(y>260)))) -> (pc'=26);
[] (pc=26) & (((x<250)&(y>250))) -> (pc'=52);
[] (pc=52) -> (pc'=26) & (y'=(y-x));
[] (pc=26) & (!(((x<250)&(y>250)))) -> (pc'=25);
[] (pc=25) & (((x<240)&(y>240))) -> (pc'=53);
[] (pc=53) -> (pc'=25) & (y'=(y-x));
[] (pc=25) & (!(((x<240)&(y>240)))) -> (pc'=24);
[] (pc=24) & (((x<230)&(y>230))) -> (pc'=54);
[] (pc=54) -> (pc'=24) & (y'=(y-x));
[] (pc=24) & (!(((x<230)&(y>230)))) -> (pc'=23);
[] (pc=23) & (((x<220)&(y>220))) -> (pc'=55);
[] (pc=55) -> (pc'=23) & (y'=(y-x));
[] (pc=23) & (!(((x<220)&(y>220)))) -> (pc'=22);
[] (pc=22) & (((x<210)&(y>210))) -> (pc'=56);
[] (pc=56) -> (pc'=22) & (y'=(y-x));
[] (pc=22) & (!(((x<210)&(y>210)))) -> (pc'=21);
[] (pc=21) & (((x<200)&(y>200))) -> (pc'=57);
[] (pc=57) -> (pc'=21) & (y'=(y-x));
[] (pc=21) & (!(((x<200)&(y>200)))) -> (pc'=20);
[] (pc=20) & (((x<190)&(y>190))) -> (pc'=58);
[] (pc=58) -> (pc'=20) & (y'=(y-x));
[] (pc=20) & (!(((x<190)&(y>190)))) -> (pc'=19);
[] (pc=19) & (((x<180)&(y>180))) -> (pc'=59);
[] (pc=59) -> (pc'=19) & (y'=(y-x));
[] (pc=19) & (!(((x<180)&(y>180)))) -> (pc'=18);
[] (pc=18) & (((x<170)&(y>170))) -> (pc'=60);
[] (pc=60) -> (pc'=18) & (y'=(y-x));
[] (pc=18) & (!(((x<170)&(y>170)))) -> (pc'=17);
[] (pc=17) & (((x<160)&(y>160))) -> (pc'=61);
[] (pc=61) -> (pc'=17) & (y'=(y-x));
[] (pc=17) & (!(((x<160)&(y>160)))) -> (pc'=16);
[] (pc=16) & (((x<150)&(y>150))) -> (pc'=62);
[] (pc=62) -> (pc'=16) & (y'=(y-x));
[] (pc=16) & (!(((x<150)&(y>150)))) -> (pc'=15);
[] (pc=15) & (((x<140)&(y>140))) -> (pc'=63);
[] (pc=63) -> (pc'=15) & (y'=(y-x));
[] (pc=15) & (!(((x<140)&(y>140)))) -> (pc'=14);
[] (pc=14) & (((x<130)&(y>130))) -> (pc'=64);
[] (pc=64) -> (pc'=14) & (y'=(y-x));
[] (pc=14) & (!(((x<130)&(y>130)))) -> (pc'=13);
[] (pc=13) & (((x<120)&(y>120))) -> (pc'=65);
[] (pc=65) -> (pc'=13) & (y'=(y-x));
[] (pc=13) & (!(((x<120)&(y>120)))) -> (pc'=12);
[] (pc=12) & (((x<110)&(y>110))) -> (pc'=66);
[] (pc=66) -> (pc'=12) & (y'=(y-x));
[] (pc=12) & (!(((x<110)&(y>110)))) -> (pc'=11);
[] (pc=11) & (((x<100)&(y>100))) -> (pc'=67);
[] (pc=67) -> (pc'=11) & (y'=(y-x));
[] (pc=11) & (!(((x<100)&(y>100)))) -> (pc'=10);
[] (pc=10) & (((x<90)&(y>90))) -> (pc'=68);
[] (pc=68) -> (pc'=10) & (y'=(y-x));
[] (pc=10) & (!(((x<90)&(y>90)))) -> (pc'=9);
[] (pc=9) & (((x<80)&(y>80))) -> (pc'=69);
[] (pc=69) -> (pc'=9) & (y'=(y-x));
[] (pc=9) & (!(((x<80)&(y>80)))) -> (pc'=8);
[] (pc=8) & (((x<70)&(y>70))) -> (pc'=70);
[] (pc=70) -> (pc'=8) & (y'=(y-x));
[] (pc=8) & (!(((x<70)&(y>70)))) -> (pc'=7);
[] (pc=7) & (((x<60)&(y>60))) -> (pc'=71);
[] (pc=71) -> (pc'=7) & (y'=(y-x));
[] (pc=7) & (!(((x<60)&(y>60)))) -> (pc'=6);
[] (pc=6) & (((x<50)&(y>50))) -> (pc'=72);
[] (pc=72) -> (pc'=6) & (y'=(y-x));
[] (pc=6) & (!(((x<50)&(y>50)))) -> (pc'=5);
[] (pc=5) & (((x<40)&(y>40))) -> (pc'=73);
[] (pc=73) -> (pc'=5) & (y'=(y-x));
[] (pc=5) & (!(((x<40)&(y>40)))) -> (pc'=4);
[] (pc=4) & (((x<30)&(y>30))) -> (pc'=74);
[] (pc=74) -> (pc'=4) & (y'=(y-x));
[] (pc=4) & (!(((x<30)&(y>30)))) -> (pc'=3);
[] (pc=3) & (((x<20)&(y>20))) -> (pc'=75);
[] (pc=75) -> (pc'=3) & (y'=(y-x));
[] (pc=3) & (!(((x<20)&(y>20)))) -> (pc'=2);
[] (pc=2) & (((x<10)&(y>10))) -> (pc'=76);
[] (pc=76) -> (pc'=2) & (y'=(y-x));
[] (pc=2) & (!(((x<10)&(y>10)))) -> (pc'=1);
[] (pc=1) -> (pc'=77);
[] (pc=77) -> (pc'=77);

endmodule

rewards "post"

pc=1 : y;

endrewards

