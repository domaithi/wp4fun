mdp

module TestMDP

pc : [0..1046766] init 0;
x : [0..100] init 0;

[] (pc=1046645) -> (pc'=1) & (x'=15);
[] (pc=1046646) -> (pc'=1) & (x'=11);
[] (pc=1046644) -> (45/70): (pc'=1046645) + (1-(45/70)): (pc'=1046646);
[] (pc=1046648) -> (pc'=1) & (x'=13);
[] (pc=1046649) -> (pc'=1) & (x'=53);
[] (pc=1046647) -> (3/77): (pc'=1046648) + (1-(3/77)): (pc'=1046649);
[] (pc=1046643) -> (5/26): (pc'=1046644) + (1-(5/26)): (pc'=1046647);
[] (pc=1046652) -> (pc'=1) & (x'=53);
[] (pc=1046653) -> (pc'=1) & (x'=6);
[] (pc=1046651) -> (22/91): (pc'=1046652) + (1-(22/91)): (pc'=1046653);
[] (pc=1046655) -> (pc'=1) & (x'=28);
[] (pc=1046656) -> (pc'=1) & (x'=49);
[] (pc=1046654) -> (54/79): (pc'=1046655) + (1-(54/79)): (pc'=1046656);
[] (pc=1046650) -> (34/79): (pc'=1046651) + (1-(34/79)): (pc'=1046654);
[] (pc=1046642) -> (9/17): (pc'=1046643) + (1-(9/17)): (pc'=1046650);
[] (pc=1046660) -> (pc'=1) & (x'=99);
[] (pc=1046661) -> (pc'=1) & (x'=65);
[] (pc=1046659) -> (14/93): (pc'=1046660) + (1-(14/93)): (pc'=1046661);
[] (pc=1046663) -> (pc'=1) & (x'=57);
[] (pc=1046664) -> (pc'=1) & (x'=89);
[] (pc=1046662) -> (5/68): (pc'=1046663) + (1-(5/68)): (pc'=1046664);
[] (pc=1046658) -> (5/80): (pc'=1046659) + (1-(5/80)): (pc'=1046662);
[] (pc=1046667) -> (pc'=1) & (x'=99);
[] (pc=1046668) -> (pc'=1) & (x'=46);
[] (pc=1046666) -> (49/61): (pc'=1046667) + (1-(49/61)): (pc'=1046668);
[] (pc=1046670) -> (pc'=1) & (x'=67);
[] (pc=1046671) -> (pc'=1) & (x'=87);
[] (pc=1046669) -> (32/49): (pc'=1046670) + (1-(32/49)): (pc'=1046671);
[] (pc=1046665) -> (31/75): (pc'=1046666) + (1-(31/75)): (pc'=1046669);
[] (pc=1046657) -> (2/56): (pc'=1046658) + (1-(2/56)): (pc'=1046665);
[] (pc=1046641) -> (3/28): (pc'=1046642) + (1-(3/28)): (pc'=1046657);
[] (pc=1046676) -> (pc'=1) & (x'=51);
[] (pc=1046677) -> (pc'=1) & (x'=84);
[] (pc=1046675) -> (23/34): (pc'=1046676) + (1-(23/34)): (pc'=1046677);
[] (pc=1046679) -> (pc'=1) & (x'=44);
[] (pc=1046680) -> (pc'=1) & (x'=85);
[] (pc=1046678) -> (29/82): (pc'=1046679) + (1-(29/82)): (pc'=1046680);
[] (pc=1046674) -> (13/79): (pc'=1046675) + (1-(13/79)): (pc'=1046678);
[] (pc=1046683) -> (pc'=1) & (x'=5);
[] (pc=1046684) -> (pc'=1) & (x'=30);
[] (pc=1046682) -> (45/100): (pc'=1046683) + (1-(45/100)): (pc'=1046684);
[] (pc=1046686) -> (pc'=1) & (x'=57);
[] (pc=1046687) -> (pc'=1) & (x'=41);
[] (pc=1046685) -> (28/32): (pc'=1046686) + (1-(28/32)): (pc'=1046687);
[] (pc=1046681) -> (4/56): (pc'=1046682) + (1-(4/56)): (pc'=1046685);
[] (pc=1046673) -> (69/81): (pc'=1046674) + (1-(69/81)): (pc'=1046681);
[] (pc=1046691) -> (pc'=1) & (x'=11);
[] (pc=1046692) -> (pc'=1) & (x'=34);
[] (pc=1046690) -> (42/75): (pc'=1046691) + (1-(42/75)): (pc'=1046692);
[] (pc=1046694) -> (pc'=1) & (x'=61);
[] (pc=1046695) -> (pc'=1) & (x'=60);
[] (pc=1046693) -> (49/87): (pc'=1046694) + (1-(49/87)): (pc'=1046695);
[] (pc=1046689) -> (50/52): (pc'=1046690) + (1-(50/52)): (pc'=1046693);
[] (pc=1046698) -> (pc'=1) & (x'=53);
[] (pc=1046699) -> (pc'=1) & (x'=97);
[] (pc=1046697) -> (34/88): (pc'=1046698) + (1-(34/88)): (pc'=1046699);
[] (pc=1046701) -> (pc'=1) & (x'=82);
[] (pc=1046702) -> (pc'=1) & (x'=86);
[] (pc=1046700) -> (47/65): (pc'=1046701) + (1-(47/65)): (pc'=1046702);
[] (pc=1046696) -> (73/93): (pc'=1046697) + (1-(73/93)): (pc'=1046700);
[] (pc=1046688) -> (51/62): (pc'=1046689) + (1-(51/62)): (pc'=1046696);
[] (pc=1046672) -> (71/77): (pc'=1046673) + (1-(71/77)): (pc'=1046688);
[] (pc=1046640) -> (33/93): (pc'=1046641) + (1-(33/93)): (pc'=1046672);
[] (pc=1046708) -> (pc'=1) & (x'=72);
[] (pc=1046709) -> (pc'=1) & (x'=76);
[] (pc=1046707) -> (52/94): (pc'=1046708) + (1-(52/94)): (pc'=1046709);
[] (pc=1046711) -> (pc'=1) & (x'=87);
[] (pc=1046712) -> (pc'=1) & (x'=52);
[] (pc=1046710) -> (45/60): (pc'=1046711) + (1-(45/60)): (pc'=1046712);
[] (pc=1046706) -> (5/54): (pc'=1046707) + (1-(5/54)): (pc'=1046710);
[] (pc=1046715) -> (pc'=1) & (x'=67);
[] (pc=1046716) -> (pc'=1) & (x'=57);
[] (pc=1046714) -> (87/89): (pc'=1046715) + (1-(87/89)): (pc'=1046716);
[] (pc=1046718) -> (pc'=1) & (x'=12);
[] (pc=1046719) -> (pc'=1) & (x'=13);
[] (pc=1046717) -> (27/56): (pc'=1046718) + (1-(27/56)): (pc'=1046719);
[] (pc=1046713) -> (18/73): (pc'=1046714) + (1-(18/73)): (pc'=1046717);
[] (pc=1046705) -> (21/65): (pc'=1046706) + (1-(21/65)): (pc'=1046713);
[] (pc=1046723) -> (pc'=1) & (x'=65);
[] (pc=1046724) -> (pc'=1) & (x'=74);
[] (pc=1046722) -> (61/75): (pc'=1046723) + (1-(61/75)): (pc'=1046724);
[] (pc=1046726) -> (pc'=1) & (x'=79);
[] (pc=1046727) -> (pc'=1) & (x'=36);
[] (pc=1046725) -> (61/90): (pc'=1046726) + (1-(61/90)): (pc'=1046727);
[] (pc=1046721) -> (3/17): (pc'=1046722) + (1-(3/17)): (pc'=1046725);
[] (pc=1046730) -> (pc'=1) & (x'=76);
[] (pc=1046731) -> (pc'=1) & (x'=45);
[] (pc=1046729) -> (28/86): (pc'=1046730) + (1-(28/86)): (pc'=1046731);
[] (pc=1046733) -> (pc'=1) & (x'=27);
[] (pc=1046734) -> (pc'=1) & (x'=40);
[] (pc=1046732) -> (71/83): (pc'=1046733) + (1-(71/83)): (pc'=1046734);
[] (pc=1046728) -> (80/92): (pc'=1046729) + (1-(80/92)): (pc'=1046732);
[] (pc=1046720) -> (61/98): (pc'=1046721) + (1-(61/98)): (pc'=1046728);
[] (pc=1046704) -> (3/92): (pc'=1046705) + (1-(3/92)): (pc'=1046720);
[] (pc=1046739) -> (pc'=1) & (x'=72);
[] (pc=1046740) -> (pc'=1) & (x'=47);
[] (pc=1046738) -> (8/83): (pc'=1046739) + (1-(8/83)): (pc'=1046740);
[] (pc=1046742) -> (pc'=1) & (x'=2);
[] (pc=1046743) -> (pc'=1) & (x'=31);
[] (pc=1046741) -> (35/48): (pc'=1046742) + (1-(35/48)): (pc'=1046743);
[] (pc=1046737) -> (19/35): (pc'=1046738) + (1-(19/35)): (pc'=1046741);
[] (pc=1046746) -> (pc'=1) & (x'=85);
[] (pc=1046747) -> (pc'=1) & (x'=84);
[] (pc=1046745) -> (6/82): (pc'=1046746) + (1-(6/82)): (pc'=1046747);
[] (pc=1046749) -> (pc'=1) & (x'=84);
[] (pc=1046750) -> (pc'=1) & (x'=21);
[] (pc=1046748) -> (31/34): (pc'=1046749) + (1-(31/34)): (pc'=1046750);
[] (pc=1046744) -> (2/77): (pc'=1046745) + (1-(2/77)): (pc'=1046748);
[] (pc=1046736) -> (70/70): (pc'=1046737) + (1-(70/70)): (pc'=1046744);
[] (pc=1046754) -> (pc'=1) & (x'=45);
[] (pc=1046755) -> (pc'=1) & (x'=85);
[] (pc=1046753) -> (49/82): (pc'=1046754) + (1-(49/82)): (pc'=1046755);
[] (pc=1046757) -> (pc'=1) & (x'=94);
[] (pc=1046758) -> (pc'=1) & (x'=1);
[] (pc=1046756) -> (13/63): (pc'=1046757) + (1-(13/63)): (pc'=1046758);
[] (pc=1046752) -> (26/54): (pc'=1046753) + (1-(26/54)): (pc'=1046756);
[] (pc=1046761) -> (pc'=1) & (x'=62);
[] (pc=1046762) -> (pc'=1) & (x'=74);
[] (pc=1046760) -> (8/38): (pc'=1046761) + (1-(8/38)): (pc'=1046762);
[] (pc=1046764) -> (pc'=1) & (x'=40);
[] (pc=1046765) -> (pc'=1) & (x'=30);
[] (pc=1046763) -> (61/95): (pc'=1046764) + (1-(61/95)): (pc'=1046765);
[] (pc=1046759) -> (11/46): (pc'=1046760) + (1-(11/46)): (pc'=1046763);
[] (pc=1046751) -> (21/95): (pc'=1046752) + (1-(21/95)): (pc'=1046759);
[] (pc=1046735) -> (12/65): (pc'=1046736) + (1-(12/65)): (pc'=1046751);
[] (pc=1046703) -> (77/83): (pc'=1046704) + (1-(77/83)): (pc'=1046735);
[] (pc=0) -> (4/17): (pc'=1046640) + (1-(4/17)): (pc'=1046703);
[] (pc=1) -> (pc'=1046766);
[] (pc=1046766) -> (pc'=1046766);

endmodule

rewards "post"

pc=1 : x;

endrewards

